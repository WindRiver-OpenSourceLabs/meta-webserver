Use-after-free vulnerability in the process_nested_data function in
ext/standard/var_unserializer.re in PHP before 5.4.36, 5.5.x before
5.5.20, and 5.6.x before 5.6.4 allows remote attackers to execute
arbitrary code via a crafted unserialize call that leverages improper
handling of duplicate keys within the serialized properties of an object.

Upstream-Status: Backport [php-5@php.net]

Signed-off-by: Stanislav Malyshev <stas@php.net>

diff -Nur php-5.5.15.orig/ext/standard/tests/serialize/bug68594.phpt php-5.5.15/ext/standard/tests/serialize/bug68594.phpt
new file mode 100644
index 0000000..60fc7a7
--- php-5.5.15.orig/ext/standard/tests/serialize/bug68594.phpt
+++ php-5.5.15/ext/standard/tests/serialize/bug68594.phpt
@@ -0,0 +1,23 @@
+--TEST--
+Bug #68545 Use after free vulnerability in unserialize()
+--FILE--
+<?php
+for ($i=4; $i<100; $i++) {
+	$m = new StdClass();
+
+	$u = array(1);
+
+	$m->aaa = array(1,2,&$u,4,5);
+	$m->bbb = 1;
+	$m->ccc = &$u;
+	$m->ddd = str_repeat("A", $i);
+
+	$z = serialize($m);
+	$z = str_replace("bbb", "aaa", $z);
+	$y = unserialize($z);
+	$z = serialize($y);
+}
+?>
+===DONE===
+--EXPECTF--
+===DONE===
diff -Nur php-5.5.15.orig/ext/standard/var_unserializer.c php-5.5.15/ext/standard/var_unserializer.c
index f6f31bd..a12d2fa 100644
--- php-5.5.15.orig/ext/standard/var_unserializer.c
+++ php-5.5.15/ext/standard/var_unserializer.c
@@ -1,4 +1,4 @@
-/* Generated by re2c 0.13.5 on Sat Jun 21 21:27:56 2014 */
+/* Generated by re2c 0.13.7.5 on Thu Dec 11 19:26:19 2014 */
 /*
   +----------------------------------------------------------------------+
   | PHP Version 5
@@ -335,6 +335,9 @@ static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long
 		} else {
 			/* object properties should include no integers */
 			convert_to_string(key);
+			if (zend_symtable_find(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, (void **)&old_data)==SUCCESS) {
+				var_push_dtor(var_hash, old_data);
+			}
 			zend_hash_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data,
 					sizeof data, NULL);
 		}
@@ -604,7 +607,8 @@ yy20:
 	if (	[0+yych] & 128) {
 		goto yy20;
 	}
-	if (yych != ':') goto yy18;
+	if (yych <= '/') goto yy18;
+	if (yych >= ';') goto yy18;
 	yych = *++YYCURSOR;
 	if (yych != '"') goto yy18;
 	++YYCURSOR;
diff -Nur php-5.5.15.orig/ext/standard/var_unserializer.re php-5.5.15/ext/standard/var_unserializer.re
index 7afef6a..4cf1d10 100644
--- php-5.5.15.orig/ext/standard/var_unserializer.re
+++ php-5.5.15/ext/standard/var_unserializer.re
@@ -341,6 +341,9 @@ static inline int process_nested_data(UNSERIALIZE_PARAMETER, HashTable *ht, long
 		} else {
 			/* object properties should include no integers */
 			convert_to_string(key);
+			if (zend_symtable_find(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, (void **)&old_data)==SUCCESS) {
+				var_push_dtor(var_hash, old_data);
+			}
 			zend_hash_update(ht, Z_STRVAL_P(key), Z_STRLEN_P(key) + 1, &data,
 					sizeof data, NULL);
 		}
